#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        cont_v {
            bindings = <&kp LC(V)>;
            key-positions = <11 12>;
        };

        cont_c {
            bindings = <&kp LC(C)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&caps_num>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        alt_win {
            bindings = <&kp LA(LEFT_WIN)>;
            key-positions = <4 3>;
        };

        close {
            bindings = <&kp LA(F4)>;
            key-positions = <5 6>;
        };

        printscreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <8 9>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        contalt_v {
            bindings = <&paste_txit>;
            key-positions = <11 12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        pass: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_4 &kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_4 &kp U &kp LS(T) &kp LS(Y) &kp LS(U) &kp LEFT_BRACKET &kp LEFT_BRACKET>,
                <&macro_wait_time 255>,
                <&kp ENTER>;

            label = "NEW_MACRO";
        };

        Germ_N: Germ_N {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp RIGHT &kp DOWN &kp LEFT_ARROW>;
            label = "GERM_N";
        };

        paste_txit: paste_txit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LA(V)) &kp V>,
                <&macro_wait_time 255>,
                <&kp ENTER>;

            label = "PASTE_TXIT";
        };

        Duplication: Duplication {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp A &kp P>;
            label = "DUPLICATION";
        };

        sort: sort {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp S &kp S>;
            label = "SORT";
        };

        window: window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp W &kp F &kp F>;
            label = "WINDOW";
        };

        caps_num: caps_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp KP_NUM>;
            label = "CAPS_NUM";
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        loop: loop {
            compatible = "zmk,behavior-key-toggle";
            label = "LOOP";
            #binding-cells = <1>;
        };

        multi_tap_tab_bspc: behavior_multi_tap {
            label = "MT_TAB_BSPC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp BSPC>;

            max-taps = <2>;
            max-tap-interrupt-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R        &kp T                                        &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F        &kp G        &kp COLON        &kp PLUS       &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V        &kp B        &kp TAB          &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 6 LANG2  &lt 2 SPACE  &lt 3 LANG1      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &Germ_N          &trans  &trans       &trans                          &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &kp LS(LC(TAB))  &kp F5  &kp LC(TAB)  &kp LC(F4)  &trans      &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans           &trans  &trans       &trans      &trans      &pass   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans           &trans  &trans       &trans      &trans      &trans  &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp COLON       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                        &Duplication   &kp LC(HOME)        &kp LC(UP_ARROW)    &kp LC(END)          &kp LS(LC(END))
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &sort    &kp LC(LS(L))  &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &window  &trans         &trans              &trans              &trans               &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans   &trans                                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp F5           &trans  &kp LC(F4)   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LS(LC(TAB))  &trans  &kp LC(TAB)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans           &trans  &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                        &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans     &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans     &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans     &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp LEFT  &kp RIGHT                              &trans
            >;
        };
    };
};
